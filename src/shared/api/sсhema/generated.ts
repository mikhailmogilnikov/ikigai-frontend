/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Вход в систему
     * @description Аутентификация пользователя по email и паролю.
     *     Возвращает JWT токен для дальнейших запросов.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['AuthLogin'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              access_token: string;
            };
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Регистрация в системе
     * @description Создание нового аккаунта пользователя.
     *     После регистрации отправляется письмо для подтверждения email.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['AuthRegister'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        404: components['responses']['NotFoundError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register/confirm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Подтверждение регистрации
     * @description Подтверждение email пользователя.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ConfirmCodePayload'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        400: components['responses']['BadRequestError'];
        401: components['responses']['UnauthorizedError'];
        404: components['responses']['NotFoundError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/recover-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Восстановление пароля
     * @description Отправка письма для восстановления пароля.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            email: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        404: components['responses']['NotFoundError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/recover-password/confirm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Подтверждение восстановления пароля
     * @description Подтверждение кода из письма для восстановления пароля.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ConfirmCodePayload'];
        };
      };
      responses: never;
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Выход из системы
     * @description Инвалидация текущего JWT токена.
     *     После logout токен становится недействительным.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Обновление токена
     * @description Получение нового JWT токена при помощи refresh token.
     *     Используется для продления сессии без повторного ввода пароля.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AuthRefresh'];
          };
        };
        401: components['responses']['UnauthorizedError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/store': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить каталог курсов
     * @description Возвращает список всех доступных для покупки курсов.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShopCourse'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/my-courses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Мои приобретенные курсы
     * @description Список курсов, которые купил авторизованный пользователь.
     *     Показывает прогресс изучения и последние активности.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['MyCourse'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{courseId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Детальная информация о курсе
     * @description Полная информация о курсе включая описание, программу обучения,
     *     отзывы и прогресс пользователя (если курс приобретен).
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FullCourse'];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{courseId}/lessons': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Список уроков курса
     * @description Получить структуру курса с модулями и уроками.
     *     Доступ к контенту зависит от статуса покупки курса.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CourseLessons'];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/lessons/{lessonId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Содержимое урока
     * @description Получить полное содержимое урока: видео, текст, задания.
     *     Доступно только для приобретенных курсов.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          lessonId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FullLesson'];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/lessons/{lessonId}/complete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Отметить урок как завершенный
     * @description Фиксация прохождения урока пользователем.
     *     Обновляет общий прогресс по курсу и может разблокировать следующие уроки.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            lesson_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * История транзакций
     * @description Список всех платежных операций пользователя:
     *     покупки курсов, возвраты, подписки.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Transaction'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Профиль пользователя
     * @description Информация о текущем авторизованном пользователе:
     *     персональные данные, статистика обучения, настройки.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Информация о текущем пользователе */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Student'];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/courses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Административный список курсов
     * @description Получить все курсы в системе с расширенной информацией
     *     для администрирования: статистика, финансы, модерация.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminCourse'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
      };
    };
    put?: never;
    /**
     * Создать новый курс
     * @description Создание курса в системе с базовой информацией.
     *     После создания можно добавлять модули и уроки.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateEntityPayload'];
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/courses/{courseId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Детали курса для администратора
     * @description Полная административная информация о курсе:
     *     статистика продаж, аналитика, настройки доступа.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminCourseMainInfo'];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    post?: never;
    /**
     * Удалить курс
     * @description ⚠️ **Необратимая операция!**
     *     Полное удаление курса со всем контентом и статистикой.
     *
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    options?: never;
    head?: never;
    /**
     * Обновить информацию о курсе
     * @description Изменение метаданных курса: название, описание,
     *     цена, статус публикации, настройки доступа.
     *
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': unknown;
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    trace?: never;
  };
  '/admin/courses/{courseId}/modules': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Модули курса
     * @description Структура курса: список всех модулей с уроками
     *     и настройками доступа для администрирования.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Модули успешно получены */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminModule'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    /**
     * Создать модуль
     * @description Добавление нового тематического модуля в курс.
     *     Модули группируют связанные по теме уроки.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateEntityPayload'];
        };
      };
      responses: {
        /** @description Модуль успешно создан */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/courses/{courseId}/modules/reorder': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Изменить порядок модулей
     * @description Переупорядочивание модулей в курсе.
     *     Влияет на последовательность изучения для студентов.
     *
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ReorderPayload'][];
        };
      };
      responses: {
        /** @description Модули успешно переупорядочены */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/modules/{moduleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить основную информацию о модуле
     * @description Получить основную информацию о модуле
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          moduleId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminModule'];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    post?: never;
    /**
     * Удалить модуль по id
     * @description Удалить модуль
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          moduleId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    options?: never;
    head?: never;
    /**
     * Обновить основную информацию о модуле
     * @description Обновить основную информацию о модуле
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          moduleId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title: string;
            is_published: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    trace?: never;
  };
  '/admin/modules/{moduleId}/lessons': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список уроков модуля
     * @description Получить список уроков модуля
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          moduleId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminLesson'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    /**
     * Создать урок
     * @description Создать урок в модуле
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          moduleId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateEntityPayload'];
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/modules/{moduleId}/lessons/reorder': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Изменить порядок уроков в модуле
     * @description Переупорядочивание уроков внутри модуля.
     *     Определяет логическую последовательность обучения.
     *
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          moduleId: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ReorderPayload'][];
        };
      };
      responses: {
        /** @description Уроки успешно переупорядочены */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/lessons/{lessonId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Содержимое урока для администратора
     * @description Получить полное содержимое урока: видео, текст, задания.
     *     Административная версия с дополнительными возможностями редактирования.
     *
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          lessonId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminLesson'];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    put?: never;
    post?: never;
    /**
     * Удалить урок по id
     * @description ⚠️ **Необратимая операция!**
     *     Полное удаление урока со всем контентом.
     *
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          lessonId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    options?: never;
    head?: never;
    /**
     * Обновить содержимое урока
     * @description Изменение контента урока: видео, текст, задания, настройки доступа.
     *     Полное редактирование всех элементов урока.
     *
     */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          lessonId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title?: string;
            video_url?: string | null;
            poster_url?: string | null;
            is_published?: boolean;
            content?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
        404: components['responses']['NotFoundResponse'];
      };
    };
    trace?: never;
  };
  '/admin/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список пользователей
     * @description Получить список пользователей для админ панели
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Список пользователей */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminUser'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/transactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список транзакций
     * @description Получить список транзакций
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminTransaction'][];
          };
        };
        401: components['responses']['UnauthorizedResponse'];
        403: components['responses']['ForbiddenResponse'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Вход в систему */
    AuthLogin: {
      email: string;
      password: string;
    };
    /** @description Регистрация в системе */
    AuthRegister: {
      first_name: string;
      last_name: string;
      email: string;
      password: string;
      repeat_password: string;
    };
    ConfirmCodePayload: {
      code: string;
    };
    /** @description Обновление токена */
    AuthRefresh: {
      access_token: string;
    };
    /**
     * Базовая схема курса
     * @description Базовая схема курса
     */
    BaseCourse: {
      id: number;
      title: string;
      image_url: string;
      lessons_amount: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /** @description Курс в списке курсов для магазина */
    ShopCourse: components['schemas']['BaseCourse'] & {
      price: number;
      modules_amount: number;
    };
    /** @description Схема ошибки */
    ErrorSchema: {
      message: string;
      code: number;
    };
    /** @description Ошибка авторизации */
    UnauthorizedError: components['schemas']['ErrorSchema'];
    /** @description Курс в списке курсов, которые пользователь купил */
    MyCourse: components['schemas']['BaseCourse'] & {
      completed_lessons_amount: number;
    };
    /**
     * Базовая схема модуля в курсе
     * @description Базовая схема модуля в курсе
     */
    BaseModule: {
      id: number;
      title: string;
      order: number;
      course_id: number;
    };
    /**
     * Базовая схема урока в курсе
     * @description Базовая схема урока в курсе
     */
    BaseLesson: {
      id: number;
      title: string;
      order: number;
      module_id: number;
      course_id: number;
    };
    /** @description Урок в курсе */
    CourseLesson: components['schemas']['BaseLesson'] & {
      is_completed: boolean;
    };
    /**
     * Модуль с уроками
     * @description Модуль с уроками
     */
    ModuleWithLessons: components['schemas']['BaseModule'] & {
      lessons: components['schemas']['CourseLesson'][];
    };
    /** @description Полная информация о курсе */
    FullCourse: components['schemas']['BaseCourse'] & {
      description: string;
      price: number;
      modules_amount: number;
      videos_amount: number;
      start_date: string | null;
      is_purchased: boolean;
      is_finished: boolean;
      completed_lessons_amount: number | null;
      modules: components['schemas']['ModuleWithLessons'][];
    };
    /** @description Ошибка не найденного ресурса */
    NotFoundError: components['schemas']['ErrorSchema'];
    /** @description Список уроков в курсе */
    CourseLessons: components['schemas']['MyCourse'] & {
      modules: components['schemas']['ModuleWithLessons'][];
    };
    /** @description Ошибка доступа */
    ForbiddenError: components['schemas']['ErrorSchema'];
    /**
     * Базовая схема теста
     * @description Базовая схема теста
     */
    BaseTest: {
      id: number;
      lesson_id: number;
      title: string;
      order: number;
    };
    /**
     * Базовая схема варианта ответа на тест
     * @description Базовая схема варианта ответа на тест
     */
    BaseTestVariant: {
      id: number;
      title: string;
      is_correct: boolean;
      description: string | null;
      order: number;
    };
    /** @description Тест с вариантами ответов */
    TestWithVariants: components['schemas']['BaseTest'] & {
      variants: components['schemas']['BaseTestVariant'][];
    };
    /** @description Содержимое урока */
    FullLesson: components['schemas']['CourseLesson'] & {
      video_url: string | null;
      poster_url: string | null;
      content: string;
      tests: components['schemas']['TestWithVariants'][];
    };
    /** @description Транзакция в списке транзакций ученика */
    Transaction: {
      id: number;
      invoice_id: string;
      /** Format: date-time */
      date: string;
      amount: number;
      title: string;
    };
    /**
     * @description Роли пользователей
     * @enum {string}
     */
    UserRoles: 'student' | 'admin';
    /** @description Базовая схема пользователя */
    BaseUser: {
      id: number;
      email?: string;
      first_name: string;
      last_name: string;
      avatar_url: string;
      join_date: string;
      role: components['schemas']['UserRoles'];
    };
    /** @description Студент */
    Student: components['schemas']['BaseUser'] & {
      completed_courses_amount: number;
      completed_lessons_amount: number;
      bought_courses_amount: number;
    };
    /** @description Курс для админа в списке курсов */
    AdminCourse: components['schemas']['BaseCourse'] & {
      is_published: boolean;
      modules_amount: number;
      price: number;
      users_amount: number;
      finished_users_amount: number;
    };
    CreateEntityPayload: {
      title: string;
    };
    /** @description Основная информация о курсе */
    AdminCourseMainInfo: components['schemas']['BaseCourse'] & {
      is_published: boolean;
      description: string;
      price: number;
      users_amount: number;
      finished_users_amount: number;
    };
    /** @description Модуль для админа */
    AdminModule: components['schemas']['BaseModule'] & {
      is_published: boolean;
      lessons_count: number;
    };
    ReorderPayload: {
      id: number;
      order: number;
    };
    /** @description Урок для админа с полным контентом */
    AdminLesson: components['schemas']['BaseLesson'] & {
      is_published: boolean;
      video_url: string | null;
      poster_url: string | null;
      content: string;
      tests: components['schemas']['TestWithVariants'][];
      /** @description Статус завершения урока (для административной статистики) */
      is_completed: boolean;
    };
    /** @description Пользователи для админ панели */
    AdminUser: components['schemas']['BaseUser'] & {
      course_amount: number;
    };
    /**
     * @description Статус транзакции
     * @enum {string}
     */
    TransactionStatus: 'pending' | 'confirmed' | 'rejected';
    /** @description Транзакция в списке транзакций ученика */
    AdminTransaction: {
      id: number;
      invoice_id: string;
      amount: number;
      created_at: string;
      status: components['schemas']['TransactionStatus'];
      user_id: number;
      course_id: number;
    };
  };
  responses: {
    /** @description Ошибка авторизации */
    UnauthorizedError: {
      headers: {
        [name: string]: unknown;
      };
      content?: never;
    };
    /** @description Ошибка не найденного ресурса */
    NotFoundError: {
      headers: {
        [name: string]: unknown;
      };
      content?: never;
    };
    /** @description Ошибка запроса */
    BadRequestError: {
      headers: {
        [name: string]: unknown;
      };
      content?: never;
    };
    /** @description Unauthorized */
    UnauthorizedResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['UnauthorizedError'];
      };
    };
    /** @description Not Found */
    NotFoundResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['NotFoundError'];
      };
    };
    /** @description Forbidden */
    ForbiddenResponse: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['ForbiddenError'];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
