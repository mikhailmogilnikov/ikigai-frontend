/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Вход в систему */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Регистрация в системе */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Выход из системы */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Обновление токена */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/store': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список курсов, которые можно купить в магазине
     * @description Получить список курсов, которые можно купить в магазине
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShopCourse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/my-courses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список курсов, которые купил пользователь
     * @description Получить список курсов, которые пользователь купил
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['MyCourse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{courseId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить курс по id
     * @description Получить информацию о курсе
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FullCourse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{courseId}/lessons': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список уроков в курсе
     * @description Получить список уроков в курсе
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CourseLessons'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/lessons/{lessonId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить урок по id
     * @description Получить содержимое урока
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          lessonId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FullLesson'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/lessons/{lessonId}/complete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Отметить урок как пройденный
     * @description Отметить урок как пройденный
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            lesson_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список транзакций
     * @description Получить список транзакций
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Transaction'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить информацию о себе
     * @description Получает информацию о текущем пользователе
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Информация о текущем пользователе */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Student'];
          };
        };
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/courses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список курсов для админа
     * @description Получить список курсов для админа
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminCourse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
      };
    };
    put?: never;
    /**
     * Создать курс
     * @description Создать курс
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            title: string;
          };
        };
      };
      responses: {
        /** @description OK */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/courses/{courseId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Получить курс по id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    put?: never;
    post?: never;
    /** Удалить курс по id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    options?: never;
    head?: never;
    /** Обновить курс по id */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: never;
    };
    trace?: never;
  };
  '/admin/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список пользователей
     * @description Получить список пользователей для админ панели
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Список пользователей */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminUser'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/transactions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список транзакций
     * @description Получить список транзакций
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminTransaction'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Базовая схема курса
     * @description Базовая схема курса
     */
    BaseCourse: {
      id: number;
      title: string;
      image_url: string;
      lessons_amount: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /** @description Курс в списке курсов для магазина */
    ShopCourse: components['schemas']['BaseCourse'] & {
      price: number;
      modules_amount: number;
    };
    /** @description Схема ошибки */
    ErrorSchema: {
      message: string;
      code: string;
    };
    /** @description Ошибка авторизации */
    UnauthorizedError: components['schemas']['ErrorSchema'];
    /** @description Курс в списке курсов, которые пользователь купил */
    MyCourse: components['schemas']['BaseCourse'] & {
      completed_lessons_amount: number;
    };
    /**
     * Базовая схема модуля в курсе
     * @description Базовая схема модуля в курсе
     */
    BaseModule: {
      id: number;
      title: string;
      order: number;
    };
    /**
     * Базовая схема урока в курсе
     * @description Базовая схема урока в курсе
     */
    BaseLesson: {
      id: number;
      title: string;
      order: number;
    };
    /** @description Урок в курсе */
    CourseLesson: components['schemas']['BaseLesson'] & {
      is_completed: boolean;
    };
    /**
     * Модуль с уроками
     * @description Модуль с уроками
     */
    ModuleWithLessons: components['schemas']['BaseModule'] & {
      lessons: components['schemas']['CourseLesson'][];
    };
    /** @description Полная информация о курсе */
    FullCourse: components['schemas']['BaseCourse'] & {
      description: string;
      price: number;
      modules_amount: number;
      videos_amount: number;
      start_date: string | null;
      is_purchased: boolean;
      is_finished: boolean;
      completed_lessons_amount: number | null;
      modules: components['schemas']['ModuleWithLessons'][];
    };
    /** @description Ошибка не найденного ресурса */
    NotFoundError: components['schemas']['ErrorSchema'];
    /** @description Список уроков в курсе */
    CourseLessons: components['schemas']['MyCourse'] & {
      modules: components['schemas']['ModuleWithLessons'][];
    };
    /** @description Ошибка доступа */
    ForbiddenError: components['schemas']['ErrorSchema'];
    /**
     * Базовая схема видео в уроке
     * @description Базовая схема видео в уроке
     */
    BaseVideo: {
      video_url: string;
      poster_url: string;
    };
    /**
     * Базовая схема теста
     * @description Базовая схема теста
     */
    BaseTest: {
      id: number;
      lesson_id: number;
      title: string;
      order: number;
    };
    /**
     * Базовая схема варианта ответа на тест
     * @description Базовая схема варианта ответа на тест
     */
    BaseTestVariant: {
      id: number;
      title: string;
      is_correct: boolean;
      description: string | null;
      order: number;
    };
    /** @description Тест с вариантами ответов */
    TestWithVariants: components['schemas']['BaseTest'] & {
      variants: components['schemas']['BaseTestVariant'][];
    };
    /** @description Содержимое урока */
    FullLesson: components['schemas']['CourseLesson'] & {
      video: components['schemas']['BaseVideo'] | null;
      content: string;
      tests: components['schemas']['TestWithVariants'][];
    };
    /** @description Транзакция в списке транзакций ученика */
    Transaction: {
      id: number;
      invoice_id: string;
      /** Format: date-time */
      date: string;
      amount: number;
      title: string;
    };
    /**
     * @description Роли пользователей
     * @enum {string}
     */
    UserRoles: 'student' | 'admin';
    /** @description Базовая схема пользователя */
    BaseUser: {
      id: number;
      email?: string;
      first_name: string;
      last_name: string;
      avatar_url: string;
      join_date: string;
      role: components['schemas']['UserRoles'];
    };
    /** @description Студент */
    Student: components['schemas']['BaseUser'] & {
      completed_courses_amount: number;
      completed_lessons_amount: number;
      bought_courses_amount: number;
    };
    /** @description Курс для админа в списке курсов */
    AdminCourse: components['schemas']['BaseCourse'] & {
      is_published: boolean;
      modules_amount: number;
      price: number;
      users_amount: number;
      finished_users_amount: number;
    };
    /** @description Пользователи для админ панели */
    AdminUser: components['schemas']['BaseUser'] & {
      course_amount: number;
    };
    /**
     * @description Статус транзакции
     * @enum {string}
     */
    TransactionStatus: 'pending' | 'confirmed' | 'rejected';
    /** @description Транзакция в списке транзакций ученика */
    AdminTransaction: {
      id: number;
      invoice_id: string;
      amount: number;
      created_at: string;
      status: components['schemas']['TransactionStatus'];
      user_id: number;
      course_id: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
