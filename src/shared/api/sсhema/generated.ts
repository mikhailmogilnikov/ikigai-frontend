/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/courses/store': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Получить список курсов, которые можно купить в магазине */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ShopCourse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/my-courses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Получить список курсов, которые пользователь купил */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['MyCourse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{courseId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Получить информацию о курсе */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FullCourse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/courses/{courseId}/lessons': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Получить список уроков в курсе */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          courseId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CourseLessons'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/lessons/{lessonId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Получить содержимое урока */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          lessonId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FullLesson'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/lessons/{lessonId}/complete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Отметить урок как пройденный */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            lessonId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ForbiddenError'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotFoundError'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/admin/courses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Получить список курсов для админа */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AdminCourse'][];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedError'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Базовая схема курса */
    BaseCourse: {
      id: string;
      title: string;
      image_url: string;
      lessons_amount: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** @description Курс в списке курсов для магазина */
    ShopCourse: components['schemas']['BaseCourse'] & {
      price: number;
      modules_amount: number;
    };
    ErrorSchema: {
      message: string;
      code: string;
    };
    /** @description Unauthorized */
    UnauthorizedError: components['schemas']['ErrorSchema'];
    /** @description Курс в списке курсов, которые пользователь купил */
    MyCourse: components['schemas']['BaseCourse'] & {
      completed_lessons_amount: number;
    };
    /** @description Базовая схема модуля в курсе */
    BaseModule: {
      id: string;
      title: string;
      order: number;
    };
    /** @description Базовая схема урока в курсе */
    BaseLesson: {
      id: string;
      title: string;
      order: number;
    };
    /** @description Урок в курсе */
    CourseLesson: components['schemas']['BaseLesson'] & {
      is_completed: boolean;
    };
    /** @description Модуль с уроками */
    ModuleWithLessons: components['schemas']['BaseModule'] & {
      lessons: components['schemas']['CourseLesson'][];
    };
    /** @description Полная информация о курсе */
    FullCourse: components['schemas']['BaseCourse'] & {
      description: string;
      price: number;
      modules_amount: number;
      is_purchased: boolean;
      is_finished: boolean;
      completed_lessons_amount: number | null;
      modules: components['schemas']['ModuleWithLessons'][];
    };
    /** @description Not Found */
    NotFoundError: components['schemas']['ErrorSchema'];
    /** @description Список уроков в курсе */
    CourseLessons: components['schemas']['MyCourse'] & {
      modules: components['schemas']['ModuleWithLessons'][];
    };
    /** @description Forbidden */
    ForbiddenError: components['schemas']['ErrorSchema'];
    /** @description Базовая схема видео в уроке */
    BaseVideo: {
      video_url: string;
      poster_url: string;
    };
    /** @description Базовая схема теста */
    BaseTest: {
      id: string;
      lesson_id: string;
      title: string;
      order: number;
    };
    /** @description Базовая схема варианта ответа на тест */
    BaseTestVariant: {
      id: string;
      title: string;
      is_correct: boolean;
      description: string | null;
      order: number;
    };
    /** @description Тест с вариантами ответов */
    TestWithVariants: components['schemas']['BaseTest'] & {
      variants: components['schemas']['BaseTestVariant'][];
    };
    /** @description Содержимое урока */
    FullLesson: components['schemas']['CourseLesson'] & {
      video: components['schemas']['BaseVideo'] | null;
      content: string;
      tests: components['schemas']['TestWithVariants'][];
    };
    /** @description Курс для админа в списке курсов */
    AdminCourse: components['schemas']['BaseCourse'] & {
      is_published: boolean;
      modules_amount: number;
      price: number;
      users_amount: number;
      finished_users_amount: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
